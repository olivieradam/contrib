INDEX
=====

Before reading this document, please read the notes about changes
needed to the gcc patches, in target-tool.in.

1. What is this?
2. Required knowledges
3. What is and how to build a cross compiler for AROS?
4. What is and how to build a native compiler for AROS?
5. Supported version
6. Contact

------------------------------------------------------------------------

1. What is this?

  This directory contains patches against the gcc source tree. Patches
  follow the same naming convention as the gcc releases, plus a trailing
  "-aros.diff" (without quotes).

2. Required knowledges

  This README is not for everyone. You need to know a few things before 
  you attempt to build a native or cross compiler, and this documentation
  does not attempt to explain to you those things.
  
  You need to know the following things:
  
    1) What is a "patch" and how to "apply" it. Refer to the "patch" 
       and "diff" commands man pages to know more about it.
     
    2) What is gcc and, more importantly, how to build it from sources.
       You can find documentation about these issues both on gcc's web 
       pages and in every gcc archive. The web page can be found at
       http://gcc.gnu.org/, and the documentation for how to build and
       install it is at http://gcc.gnu.org/install/.

    3) If you want to build a native compiler, you also need to know
       how to use a compiler and, more specifically, a crosscompiler 
       for AROS.
       
  Failure to meet any of the above requirements will most likely result 
  in anger and frustration, you've been warned! :-) 
  
3. What is and how to build a cross compiler for AROS?

  A cross compiler is a compiler able to produce binaries usable by a
  "target" system, which however runs on a different system than the
  target's one. This is useful to speed up development, in case the
  "host" system is faster than the "target" one, or if the "host"
  system has any other advantages over the "target" one.

  In our case the target system is AROS, and to produce a crosscompiler
  for AROS you need to go trough the following steps:

  1) Decide which patch you want to apply

  2) Download the archive to which the patch you chose applies. You
     can find such archives at one of the sites listed at
     http://www.gnu.org/software/gcc/releases.html

  3) Apply the patch

  4) Assuming the patched gcc sources are in the "src/gcc-aros" directory,
     make a new directory named "src/gcc-aros-x-bin" and cd onto it.
    
  5) Now issue the following command (all on one line):
  
     ../gcc-aros/configure --target=<cpu>-aros --with-headers=<path/to/AROS/headers> 
     --with-libs=<path/to/AROS/libs>

     replace the various <...> with the proper values.

     If includes and libs are already placed in standard directories
     (<prefix>/<cpu>-aros/sys-include and <prefix>/<cpu>-aros/lib), then
     --with-headers and --with-libs parameters are not needed.

  6) Type "make" and then "make install",

- IMPORTANT:
              Multilib toolchains in GCC may include soft and
              hard-float ABI versions (e.g. ARM). AROS components are only
              built for the target float ABI configuration, so compilation of
              libatomic for the multilib targets fails. For these targets libatomic
              is built using a separate manual build.

- IMPORTANT2:
              Production of working AROS executables requires a 
              tool named collect-aros. collect-aros is part of the
	      AROS build system.
              Versions produced during the AROS build have hardcoded
              paths to binutils, and as such will not work with standalone
              toolchains. Instructions to build a correct version of collect-aros
              for standalone toolchain can be found in its README file.
              A compiled collect-aros can be placed into the following
	      directory (there you'll also see some binutils stuff) -:
              
	           <your_install_prefix>/<cpu>-aros/bin


- IMPORTANT3:
	      Compiling the GCC cross-compiler requires that you have built the
	      necessary dependancies for it first. These will include at the least
	      the "binutils" package, to provide a suitable linker, which is compilable
              for AROS out of the box (no need for patches).
              The latest version can be obtained from http://www.gnu.org/software/binutils/

- IMPORTANT4:
	      MacOS X cross-toolchain compilation requires the following
	      additional arguments to be passed to configure:

	           binutils: --disable-werror
	           gcc     : --with-libiconv-prefix=/opt/local --with-gmp=/opt/local --with-mpfr=/opt/local


4. What is and how to build a native compiler for AROS?

  As opposed to a crosscompiler, a native compiler runs on the same
  system the compiler is targetted for, that is "host" and "target"
  are the same.

  Currently there's no way to build a native compiler from inside AROS
  itself, thus you need to use another operating system as the "build"
  system, and for this purpose you need to build a crosscompiler and
  the cross-binutils before trying to build the native compiler.
  For this, refer to section 2.

  Assuming you've got the crosscompiler and related utilities built
  already, follow the below procedure in order to build a native
  compiler:

    1) Assuming the patched gcc sources are in the "src/gcc-aros" directory,
       make a new directory named "src/gcc-aros-bin" and cd onto it.
    
    2) Now issue the following command (all on one line):
  
       CC='i386-aros-gcc -nix' ../gcc-aros/configure --target=<cpu>-aros
       --host=<cpu>-aros --build=local
       --prefix=<prefix for the gcc installation, from the AROS point of view>
       --enable-long-long 
 
       Replace the various <...> with the proper values.

       <prefix for...> refers to the prefix, from the AROS point of
       view, which will be put before the names of all the directories
       the build system will install files and executables into.
       For instance, the gcc executable will be installed in
       <prefix>/bin, thus if you set the prefix to "GCC:" (or /GCC), for
       instance, then the gcc executable will be installed in GCC:/bin
       (or /GCC/bin), which actually is the same as GCC:bin (from gcc's
       point of view, which uses some unix path conversion routines built
       in the AROS libc). Feel free to set that prefix to whatever you want.

    3) Type "make", without quotes.

    4) Type "make install prefix=<XXX> exec_prefix=<XXX>", without
       quotes.

       <XXX> refers to the prefix, from the BUILD SYSTEM
       point of view, which will be put before the names of all
       directories the build system will install files and executables
       in. This *must* be the same prefix that you specified at
       configuration time, except that this time it must be specified
       as seen by the build system. However, If at configuration time
       you used a volume name as prefix, then at this stage you can
       specify whatever prefix you want, as long as you take care
       of mounting the previously specified volume in AROS, or
       assigning it to the directory where gcc's stuff really is.

  IMPORTANT: You still need the native binutils if you want to
             do anything with the native compiler. The steps you need
	     to go trough to build the native binutils are pretty much
	     the same as the ones for gcc, except you needn't apply
	     any patches, as the AROS support for the binutils is
             already in the main archive. All that was said about the
	     "prefix" stuff still applies for the binutils as well.

  IMPORTANT2: You need to build also collect-aros, natively for AROS.
              In order to do this, you will have to use the
              crosscompiler and build it by yourself. It's not
	      hard, really, but at the moment there are no instructions
	      on how to do so. You basically need to use the "bfd"
              backend, and the "spawn" version of docommand, and then
	      link with libiberty.a and libbfd.a.

5. Supported version(s)

Currently only patches for GCC 6.5.0 and newer are maintained.
Out-of-date patches for older versions of gcc are available in the
history of the AROS subversion repository.
If one wants to patch another version of gcc it probably is better
to port a maintained patch than trying to bring an out-of-date patch
up-to-date.

6. Contact

For more information about AROS and using this compiler you should
join the AROS Developer Team Slack, and enquire in the toolchain channel.
